# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W4ulbyL5mE_uD8OhILyDtvo-jO9QayMZ
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional
from tensorflow.keras.optimizers import Adam
import requests
from bs4 import BeautifulSoup

import urllib.request

url = 'https://en.wikipedia.org/wiki/Chatbot'
data = urllib.request.urlopen(url).read()

print(data)

from bs4 import BeautifulSoup
import re

# Parse HTML content
soup = BeautifulSoup(data, 'html.parser')

# Find all paragraphs containing text
paragraphs = soup.find_all('p')

# Extract text from paragraphs
text_data = ""
for paragraph in paragraphs:
    text_data += paragraph.get_text()

# Clean the text data
cleaned_text = re.sub(r'\[[0-9]*\]', ' ', text_data)  # Remove citation numbers
cleaned_text = re.sub(r'\s+', ' ', cleaned_text)  # Remove extra whitespaces
cleaned_text = cleaned_text.lower()  # Convert to lowercase

print(cleaned_text[:500])  # Print the first 500 characters of cleaned text

# Tokenization
tokenizer = Tokenizer()
tokenizer.fit_on_texts([cleaned_text])
total_words = len(tokenizer.word_index) + 1

# Convert text to sequences
input_sequences = []
for line in cleaned_text.split('\n'):
    token_list = tokenizer.texts_to_sequences([line])[0]
    for i in range(1, len(token_list)):
        n_gram_sequence = token_list[:i+1]
        input_sequences.append(n_gram_sequence)

# Padding sequences
max_sequence_len = max([len(x) for x in input_sequences])
input_sequences = np.array(pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre'))

# Create predictors and labels
X, y = input_sequences[:,:-1],input_sequences[:,-1]
y = tf.keras.utils.to_categorical(y, num_classes=total_words)

# Model architecture
model = Sequential()
model.add(Embedding(total_words, 100, input_length=max_sequence_len-1))
model.add(Bidirectional(LSTM(150)))
model.add(Dense(total_words, activation='softmax'))

# Compile model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Model summary
print(model.summary())

import pickle

# Save tokenizer as a pickle file
with open('tokenizer.pkl', 'wb') as f:
    pickle.dump(tokenizer, f)

# Train the model
history = model.fit(X, y, epochs=100, verbose=1)

# Evaluate the model
loss, accuracy = model.evaluate(X, y, verbose=0)
print('Accuracy: {:.2f}%'.format(accuracy * 100))

# Plot training history
import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'])
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train'], loc='upper left')
plt.show()

# Save the model
model.save('chatbot_model.h5')

print("Model saved successfully.")